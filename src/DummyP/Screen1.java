/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package DummyP;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author sambit.sahu
 */
public class Screen1 extends javax.swing.JFrame {
    
    private DefaultTableModel tableModel;
    private JTable headersTable;

    /**
     * Creates new form Screen1
     */
    public Screen1() {
        initComponents();
        setUpHeaderComponents();
    }
    
    private void setUpHeaderComponents() {
    // Initialize table model and table
    String[] columnNames = {"Header Name", "Header Value"};
    tableModel = new DefaultTableModel(columnNames, 0);
    headersTable = new JTable(tableModel);
    
    JScrollPane scrollPane = new JScrollPane(headersTable);
    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    scrollPane.setPreferredSize(new Dimension(400,150));
    if (headersPanel != null) {
        headersPanel.removeAll(); // Clear any existing content
        headersPanel.setLayout(new BorderLayout());
        headersPanel.add(scrollPane,BorderLayout.CENTER);
        // Revalidate and repaint headersPanel
        headersPanel.revalidate();
        headersPanel.repaint();
    }
}
    
    private void deleteSelectedRow() {
       int selectedRow = headersTable.getSelectedRow();
    if (selectedRow != -1) {
        tableModel.removeRow(selectedRow);
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    private static final Map<String, Object> jsonFieldsAndValues = new LinkedHashMap<>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        SubmitBtn = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jsonrequestBody = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        deleteHeaderBtn = new javax.swing.JButton();
        addHeaderBtn = new javax.swing.JButton();
        headersJScrollPane = new javax.swing.JScrollPane();
        headersPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SubmitBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        SubmitBtn.setText("Submit");
        SubmitBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SubmitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitBtnActionPerformed(evt);
            }
        });
        jPanel5.add(SubmitBtn);

        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton5.setText("Reset");
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton5);

        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton6.setText("Exit");
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel5.add(jButton6);

        jsonrequestBody.setColumns(20);
        jsonrequestBody.setRows(5);
        jScrollPane1.setViewportView(jsonrequestBody);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Enter Json Request Body");

        deleteHeaderBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deleteHeaderBtn.setText("Delete Row");
        deleteHeaderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHeaderBtnActionPerformed(evt);
            }
        });

        addHeaderBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addHeaderBtn.setText("Add Row");
        addHeaderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHeaderBtnActionPerformed(evt);
            }
        });

        headersPanel.setLayout(new javax.swing.BoxLayout(headersPanel, javax.swing.BoxLayout.Y_AXIS));
        headersJScrollPane.setViewportView(headersPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(headersJScrollPane)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(deleteHeaderBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addHeaderBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(145, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addHeaderBtn)
                        .addGap(18, 18, 18)
                        .addComponent(deleteHeaderBtn)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(headersJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private static void extractFieldsAndValues(Object requestObject, String path) {
        if (requestObject instanceof JSONObject jsonObject) {
            for (Object key : jsonObject.keySet()) {
                String keyField = key.toString();
                extractFieldsAndValues(jsonObject.get(keyField), path.isEmpty() ? keyField : path + "." + keyField);
            }
        } else if (requestObject instanceof JSONArray jsonArray) {
            for (int i = 0; i < jsonArray.length(); i++) {
                extractFieldsAndValues(jsonArray.get(i), path + "[" + i + "]");
            }
        } else {
            jsonFieldsAndValues.put(path, requestObject); // Store field and value
        }
    }

    private void printDataInTable(Map<String, Object> fieldKeyAndvalueMap) {
        JFrame frame = new JFrame("JSON Data Table");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 500);
        DefaultTableModel table = new DefaultTableModel();
        table.setColumnIdentifiers(new String[]{"Key Path", "value"});
        fieldKeyAndvalueMap.forEach((key, value) -> table.addRow(new Object[]{key, value}));
        JTable jTable = new JTable(table);
        JScrollPane scroll = new JScrollPane(jTable);
        frame.add(scroll);
        frame.setVisible(true);
    }


    private void SubmitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitBtnActionPerformed
        String jsonInput = jsonrequestBody.getText();
        try {
            // Parse JSON input
            JSONObject jsonObject = new JSONObject(jsonInput);

            // Extract all fields and their values
            jsonFieldsAndValues.clear(); // Clear previous data
            extractFieldsAndValues(jsonObject, "");

            // Validate data and prepare table
            Object[][] tableData = prepareTableData(jsonFieldsAndValues);

            // Pass data to DummyScreen2
            Screen2 screen2 = new Screen2(tableData);
            screen2.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Invalid JSON input: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SubmitBtnActionPerformed

    private void addHeaderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHeaderBtnActionPerformed
        // TODO add your handling code here:
        OpenHeaderDialog dialog = new OpenHeaderDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_addHeaderBtnActionPerformed

    private void deleteHeaderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHeaderBtnActionPerformed
        // TODO add your handling code here:
        deleteSelectedRow();
    }//GEN-LAST:event_deleteHeaderBtnActionPerformed

    public void addHeader(String name, String value) {
        if (tableModel != null) {
        tableModel.addRow(new Object[]{name, value});
        }
    }

    private static Object[][] prepareTableData(Map<String, Object> fieldKeyAndValueMap) {
        List<Object[]> tableDataList = new ArrayList<>();

        for (Map.Entry<String, Object> entry : fieldKeyAndValueMap.entrySet()) {
            String field = entry.getKey();  // Field name
            Object value = entry.getValue(); // Field value
            String dataType = "String"; // Default data type

            // Prepare table row with default values
            tableDataList.add(new Object[]{field, dataType, value, "", ""});
        }

        return tableDataList.toArray(new Object[0][]);
    }

    private static String determineDataType(Object value) {
        if (value instanceof Integer) {
            return "Integer";
        } else if (value instanceof Double || value instanceof Float) {
            return "Decimal";
        } else if (value instanceof Boolean) {
            return "Boolean"; //check for boolean type
        } else if (value instanceof String) {
            String stringValue = value.toString();
            if (stringValue.matches("^[0-9a-fA-F\\-]{36}$")) {
                return "UUID";
            } else if (stringValue.matches("\\d+")) {
                return "Integer";
            } else if (stringValue.matches("\\d+\\.\\d+")) {
                return "Decimal";
            } else {
                return "String";
            }
        } else {
            return "Unknown"; // Unsupported type
        }
    }

    private static boolean validateDataType(Object value, String expectedType) {
        if (expectedType.equals("Integer") && value instanceof Integer) {
            return true;
        }
        if (expectedType.equals("Decimal") && (value instanceof Double || value instanceof Float)) {
            return true;
        }
        if (expectedType.equals("String") && value instanceof String) {
            return true;
        }
        if (expectedType.equals("UUID") && value instanceof String) {
            return value.toString().matches("^[0-9a-fA-F\\-]{36}$");
        }
        if (expectedType.equals("Boolean") && value instanceof Boolean) {
            return true;
        }
        return false;
    }

//    private static void showHeaderDialog() {
//        JDialog headersDialog = new JDialog();
//        headersDialog.setSize(300, 200);
//        headersDialog.setLayout(new GridLayout(3, 2, 10, 10));
//        JLabel nameLabel = new JLabel("Name: ");
//        JTextField nameTextField = new JTextField();
//        JLabel valueLabel = new JLabel("Value: ");
//        JTextField valueTextField = new JTextField();
//
//        JButton addButton = new JButton("Add");
//        JButton clearButton = new JButton("Clear");
//        JButton exitButton = new JButton("Exit");
//
//        addButton.addActionListener(e -> {
//            String name = nameTextField.getText().trim();
//            String value = valueTextField.getText().trim();
//            if (!name.isEmpty() && !value.isEmpty()) {
//                addHeader(name, value);
//                headersDialog.dispose();
//            } else {
//                JOptionPane.showMessageDialog(headersDialog, "Name and value cannot be empty", "Error", JOptionPane.ERROR);
//            }
//        });
//        clearButton.addActionListener(e -> {
//            nameTextField.setText("");
//            valueTextField.setText("");
//
//            headersDialog.add(nameLabel);
//            headersDialog.add(nameTextField);
//            headersDialog.add(valueLabel);
//            headersDialog.add(valueTextField);
//            headersDialog.add(new JLabel());
//            headersDialog.add(new JLabel());
//            headersDialog.add(addButton);
//            headersDialog.add(clearButton);
//            headersDialog.add(exitButton);
//            headersDialog.setVisible(true);
//        });
//    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Screen1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Screen1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Screen1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Screen1.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Screen1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SubmitBtn;
    private javax.swing.JButton addHeaderBtn;
    private javax.swing.JButton deleteHeaderBtn;
    private javax.swing.JScrollPane headersJScrollPane;
    private javax.swing.JPanel headersPanel;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jsonrequestBody;
    // End of variables declaration//GEN-END:variables

}

//-------------------changes i have made--------------------------------------------------
//private void SubmitBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
//        String jsonInput = jsonrequestBody.getText();
//        try {
//            // Parse JSON input
//            JSONObject jsonObject = new JSONObject(jsonInput);
//
//            // Extract all fields and their values
//            jsonFieldsAndValues.clear(); // Clear previous data
//            extractFieldsAndValues(jsonObject, "");
//
//            // Validate data and prepare table
//            Object[][] tableData = validateAndPrepareTableData(jsonFieldsAndValues);
//
//            // Pass data to DummyScreen2
//            Screen2 screen2 = new Screen2(tableData);
//            screen2.setVisible(true);
//        } catch (Exception e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(this, "Invalid JSON input: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//        }
//    }
//
//private static Object[][] validateAndPrepareTableData(Map<String, Object> fieldKeyAndValueMap) {
//        List<Object[]> tableDataList = new ArrayList<>();
//
//        for (Map.Entry<String, Object> entry : fieldKeyAndValueMap.entrySet()) {
//            String field = entry.getKey();
//            Object value = entry.getValue();
//            String dataType = determineDataType(value);
//
//            String positiveData = ""; // Default blank
//            String negativeData = ""; // Default blank
//            String errorMessage = null; // Default null
//
//            if (dataType.equals("Unknown")) {
//                // Unknown data type: leave fields blank
//                errorMessage = "Unsupported data type";
//            } else if (validateDataType(value, dataType)) {
//                // Valid data type
//                positiveData = "200";
//            } else {
//                // Invalid data type
//                negativeData = "400";
//                errorMessage = "Invalid " + dataType + " format";
//            }
//
//            tableDataList.add(new Object[]{field, dataType, positiveData, negativeData, errorMessage});
//        }
//
//        return tableDataList.toArray(new Object[0][]);
//    }
